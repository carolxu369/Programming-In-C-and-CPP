#ifndef STORY_HPP
#define STORY_HPP

#include <ctype.h>
#include <stdio.h>
#include <string.h>

#include <algorithm>
#include <climits>  // ULONG_MAX
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

// define a function which checks whether the page number is a valid integer fits into size_t
size_t check_return_pagenum(std::string pagenum_str);

class PageChoice {
 private:
  size_t this_page;
  size_t next_page;
  std::string text;

 public:
  // constructor
  PageChoice();
  PageChoice(size_t curr, size_t next, std::string t);
  //copy constructor
  PageChoice(const PageChoice & rhs);
  //assignment constructor
  PageChoice & operator=(const PageChoice & rhs);
  // Destructor
  ~PageChoice();

  size_t get_next_page() const;
  std::string get_text() const;
};

class NewPage {
 private:
  size_t page_num;
  std::string page_type;
  std::string filename;
  std::vector<PageChoice> v_choice;

 public:
  // constructor
  NewPage(size_t num, std::string type, std::string file);
  //copy constructor
  NewPage(const NewPage & rhs);
  //assignment constructor
  NewPage & operator=(const NewPage & rhs);
  // Destructor
  ~NewPage();

  // add choice to the vector
  void add_choice(PageChoice choice);
  size_t get_num() const;
  std::string get_type() const;
  std::string get_file() const;
  std::vector<PageChoice> get_v_choice() const;
};

// override the print method
std::ostream & operator<<(std::ostream & s, const NewPage & rhs);

// cyoa-step1 main
std::vector<NewPage> cyoa_step1(int argc, char ** argv);

// not_in function
int not_in(size_t num, std::vector<std::pair<size_t, size_t> > page_occur);

#endif
